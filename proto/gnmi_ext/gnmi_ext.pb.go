//
// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: proto/gnmi_ext/gnmi_ext.proto

// Package gnmi_ext defines a set of extensions messages which can be optionally
// included with the request and response messages of gNMI RPCs. A set of
// well-known extensions are defined within this file, along with a registry for
// extensions defined outside of this package.

package gnmi_ext

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RegisteredExtension is an enumeration acting as a registry for extensions
// defined by external sources.
type ExtensionID int32

const (
	ExtensionID_EID_UNSET ExtensionID = 0
	// An experimental extension that may be used during prototyping of a new
	// extension.
	ExtensionID_EID_EXPERIMENTAL ExtensionID = 999
)

// Enum value maps for ExtensionID.
var (
	ExtensionID_name = map[int32]string{
		0:   "EID_UNSET",
		999: "EID_EXPERIMENTAL",
	}
	ExtensionID_value = map[string]int32{
		"EID_UNSET":        0,
		"EID_EXPERIMENTAL": 999,
	}
)

func (x ExtensionID) Enum() *ExtensionID {
	p := new(ExtensionID)
	*p = x
	return p
}

func (x ExtensionID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionID) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gnmi_ext_gnmi_ext_proto_enumTypes[0].Descriptor()
}

func (ExtensionID) Type() protoreflect.EnumType {
	return &file_proto_gnmi_ext_gnmi_ext_proto_enumTypes[0]
}

func (x ExtensionID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionID.Descriptor instead.
func (ExtensionID) EnumDescriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{0}
}

// The Extension message contains a single gNMI extension.
type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ext:
	//
	//	*Extension_RegisteredExt
	//	*Extension_MasterArbitration
	//	*Extension_History
	//	*Extension_Commit
	//	*Extension_Depth
	Ext isExtension_Ext `protobuf_oneof:"ext"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{0}
}

func (m *Extension) GetExt() isExtension_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (x *Extension) GetRegisteredExt() *RegisteredExtension {
	if x, ok := x.GetExt().(*Extension_RegisteredExt); ok {
		return x.RegisteredExt
	}
	return nil
}

func (x *Extension) GetMasterArbitration() *MasterArbitration {
	if x, ok := x.GetExt().(*Extension_MasterArbitration); ok {
		return x.MasterArbitration
	}
	return nil
}

func (x *Extension) GetHistory() *History {
	if x, ok := x.GetExt().(*Extension_History); ok {
		return x.History
	}
	return nil
}

func (x *Extension) GetCommit() *Commit {
	if x, ok := x.GetExt().(*Extension_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Extension) GetDepth() *Depth {
	if x, ok := x.GetExt().(*Extension_Depth); ok {
		return x.Depth
	}
	return nil
}

type isExtension_Ext interface {
	isExtension_Ext()
}

type Extension_RegisteredExt struct {
	RegisteredExt *RegisteredExtension `protobuf:"bytes,1,opt,name=registered_ext,json=registeredExt,proto3,oneof"` // A registered extension.
}

type Extension_MasterArbitration struct {
	// Well known extensions.
	MasterArbitration *MasterArbitration `protobuf:"bytes,2,opt,name=master_arbitration,json=masterArbitration,proto3,oneof"` // Master arbitration extension.
}

type Extension_History struct {
	History *History `protobuf:"bytes,3,opt,name=history,proto3,oneof"` // History extension.
}

type Extension_Commit struct {
	Commit *Commit `protobuf:"bytes,4,opt,name=commit,proto3,oneof"` // Commit confirmed extension.
}

type Extension_Depth struct {
	Depth *Depth `protobuf:"bytes,5,opt,name=depth,proto3,oneof"` // Depth extension.
}

func (*Extension_RegisteredExt) isExtension_Ext() {}

func (*Extension_MasterArbitration) isExtension_Ext() {}

func (*Extension_History) isExtension_Ext() {}

func (*Extension_Commit) isExtension_Ext() {}

func (*Extension_Depth) isExtension_Ext() {}

// The RegisteredExtension message defines an extension which is defined outside
// of this file.
type RegisteredExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  ExtensionID `protobuf:"varint,1,opt,name=id,proto3,enum=gnmi_ext.ExtensionID" json:"id,omitempty"` // The unique ID assigned to this extension.
	Msg []byte      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                          // The binary-marshalled protobuf extension payload.
}

func (x *RegisteredExtension) Reset() {
	*x = RegisteredExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredExtension) ProtoMessage() {}

func (x *RegisteredExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredExtension.ProtoReflect.Descriptor instead.
func (*RegisteredExtension) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{1}
}

func (x *RegisteredExtension) GetId() ExtensionID {
	if x != nil {
		return x.Id
	}
	return ExtensionID_EID_UNSET
}

func (x *RegisteredExtension) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

// MasterArbitration is used to select the master among multiple gNMI clients
// with the same Roles. The client with the largest election_id is honored as
// the master.
// The document about gNMI master arbitration can be found at
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-master-arbitration.md
type MasterArbitration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role       *Role    `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	ElectionId *Uint128 `protobuf:"bytes,2,opt,name=election_id,json=electionId,proto3" json:"election_id,omitempty"`
}

func (x *MasterArbitration) Reset() {
	*x = MasterArbitration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterArbitration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterArbitration) ProtoMessage() {}

func (x *MasterArbitration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterArbitration.ProtoReflect.Descriptor instead.
func (*MasterArbitration) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{2}
}

func (x *MasterArbitration) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *MasterArbitration) GetElectionId() *Uint128 {
	if x != nil {
		return x.ElectionId
	}
	return nil
}

// Representation of unsigned 128-bit integer.
type Uint128 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High uint64 `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  uint64 `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *Uint128) Reset() {
	*x = Uint128{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint128) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint128) ProtoMessage() {}

func (x *Uint128) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint128.ProtoReflect.Descriptor instead.
func (*Uint128) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{3}
}

func (x *Uint128) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Uint128) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

// There can be one master for each role. The role is identified by its id.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{4}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// The History extension allows clients to request historical data. Its
// spec can be found at
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-history.md
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*History_SnapshotTime
	//	*History_Range
	Request isHistory_Request `protobuf_oneof:"request"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{5}
}

func (m *History) GetRequest() isHistory_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *History) GetSnapshotTime() int64 {
	if x, ok := x.GetRequest().(*History_SnapshotTime); ok {
		return x.SnapshotTime
	}
	return 0
}

func (x *History) GetRange() *TimeRange {
	if x, ok := x.GetRequest().(*History_Range); ok {
		return x.Range
	}
	return nil
}

type isHistory_Request interface {
	isHistory_Request()
}

type History_SnapshotTime struct {
	SnapshotTime int64 `protobuf:"varint,1,opt,name=snapshot_time,json=snapshotTime,proto3,oneof"` // Nanoseconds since the epoch
}

type History_Range struct {
	Range *TimeRange `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*History_SnapshotTime) isHistory_Request() {}

func (*History_Range) isHistory_Request() {}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"` // Nanoseconds since the epoch
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`     // Nanoseconds since the epoch
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{6}
}

func (x *TimeRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TimeRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// Commit confirmed extension allows automated revert of the configuration after
// certain duration if an explicit confirmation is not issued. It allows
// explicit cancellation of the commit during the rollback window. There cannot
// be more than one commit active at a given time. The document about gNMI
// commit confirmed can be found at
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-commit-confirmed.md
type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is provided by the client during the commit request. During confirm and
	// cancel actions the provided ID should match the ID provided during commit.
	// If ID is not passed in any actions server shall return error.
	// Required.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Action:
	//
	//	*Commit_Commit
	//	*Commit_Confirm
	//	*Commit_Cancel
	//	*Commit_SetRollbackDuration
	Action isCommit_Action `protobuf_oneof:"action"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{7}
}

func (x *Commit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Commit) GetAction() isCommit_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Commit) GetCommit() *CommitRequest {
	if x, ok := x.GetAction().(*Commit_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Commit) GetConfirm() *CommitConfirm {
	if x, ok := x.GetAction().(*Commit_Confirm); ok {
		return x.Confirm
	}
	return nil
}

func (x *Commit) GetCancel() *CommitCancel {
	if x, ok := x.GetAction().(*Commit_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *Commit) GetSetRollbackDuration() *CommitSetRollbackDuration {
	if x, ok := x.GetAction().(*Commit_SetRollbackDuration); ok {
		return x.SetRollbackDuration
	}
	return nil
}

type isCommit_Action interface {
	isCommit_Action()
}

type Commit_Commit struct {
	// commit action creates a new commit. If a commit is on-going, server
	// returns error.
	Commit *CommitRequest `protobuf:"bytes,2,opt,name=commit,proto3,oneof"`
}

type Commit_Confirm struct {
	// confirm action will confirm an on-going commit, the ID provided during
	// confirm should match the on-going commit ID.
	Confirm *CommitConfirm `protobuf:"bytes,3,opt,name=confirm,proto3,oneof"`
}

type Commit_Cancel struct {
	// cancel action will cancel an on-going commit, the ID provided during
	// cancel should match the on-going commit ID.
	Cancel *CommitCancel `protobuf:"bytes,4,opt,name=cancel,proto3,oneof"`
}

type Commit_SetRollbackDuration struct {
	// set rollback duration action sets the rollback duration of an on-going commit
	// to a new value.
	// The ID provided with the Commit message should match the on-going commit ID.
	SetRollbackDuration *CommitSetRollbackDuration `protobuf:"bytes,5,opt,name=set_rollback_duration,json=setRollbackDuration,proto3,oneof"`
}

func (*Commit_Commit) isCommit_Action() {}

func (*Commit_Confirm) isCommit_Action() {}

func (*Commit_Cancel) isCommit_Action() {}

func (*Commit_SetRollbackDuration) isCommit_Action() {}

// CommitRequest is used to create a new confirmed commit. It hold additional
// parameter requried for commit action.
type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum duration to wait for a confirmaton before reverting the commit.
	RollbackDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=rollback_duration,json=rollbackDuration,proto3" json:"rollback_duration,omitempty"`
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{8}
}

func (x *CommitRequest) GetRollbackDuration() *durationpb.Duration {
	if x != nil {
		return x.RollbackDuration
	}
	return nil
}

// CommitConfirm is used to confirm an on-going commit. It hold additional
// parameter requried for confirm action.
type CommitConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitConfirm) Reset() {
	*x = CommitConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitConfirm) ProtoMessage() {}

func (x *CommitConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitConfirm.ProtoReflect.Descriptor instead.
func (*CommitConfirm) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{9}
}

// CommitCancel is used to cancel an on-going commit. It hold additional
// parameter requried for cancel action.
type CommitCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitCancel) Reset() {
	*x = CommitCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCancel) ProtoMessage() {}

func (x *CommitCancel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCancel.ProtoReflect.Descriptor instead.
func (*CommitCancel) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{10}
}

// CommitSetRollbackDuration is used to set the existing rollback duration value
// of an on-going commit to a new desired value.
type CommitSetRollbackDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum duration to wait for a confirmaton before reverting the commit.
	RollbackDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=rollback_duration,json=rollbackDuration,proto3" json:"rollback_duration,omitempty"`
}

func (x *CommitSetRollbackDuration) Reset() {
	*x = CommitSetRollbackDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitSetRollbackDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSetRollbackDuration) ProtoMessage() {}

func (x *CommitSetRollbackDuration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSetRollbackDuration.ProtoReflect.Descriptor instead.
func (*CommitSetRollbackDuration) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{11}
}

func (x *CommitSetRollbackDuration) GetRollbackDuration() *durationpb.Duration {
	if x != nil {
		return x.RollbackDuration
	}
	return nil
}

// Depth allows clients to specify the depth of the subtree to be returned in
// the response. The depth is specified as the number of levels below the
// specified path.
// The depth is applied to all paths in the Get or Subscribe request.
// The document about gNMI depth can be found at
// https://github.com/openconfig/reference/tree/master/rpc/gnmi/gnmi-depth.md
type Depth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The level of the subtree to be returned in the response.
	// Value of 0 means no depth limit and behaves the same as if the extension
	// was not specified.
	// Value of 1 means only the specified path and its direct children will be
	// returned.
	Level uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Depth) Reset() {
	*x = Depth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Depth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Depth) ProtoMessage() {}

func (x *Depth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Depth.ProtoReflect.Descriptor instead.
func (*Depth) Descriptor() ([]byte, []int) {
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP(), []int{12}
}

func (x *Depth) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

var File_proto_gnmi_ext_gnmi_ext_proto protoreflect.FileDescriptor

var file_proto_gnmi_ext_gnmi_ext_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74,
	0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x12,
	0x4c, 0x0a, 0x12, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6e,
	0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65,
	0x78, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6e,
	0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6b, 0x0a, 0x11, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6e,
	0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78,
	0x74, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x52, 0x0a, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x07, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x32, 0x38,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x22, 0x16, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68,
	0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x97, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f,
	0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x12, 0x30, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x22, 0x63, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0x33, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52,
	0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0xe7, 0x07, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6e, 0x6d, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_gnmi_ext_gnmi_ext_proto_rawDescOnce sync.Once
	file_proto_gnmi_ext_gnmi_ext_proto_rawDescData = file_proto_gnmi_ext_gnmi_ext_proto_rawDesc
)

func file_proto_gnmi_ext_gnmi_ext_proto_rawDescGZIP() []byte {
	file_proto_gnmi_ext_gnmi_ext_proto_rawDescOnce.Do(func() {
		file_proto_gnmi_ext_gnmi_ext_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_gnmi_ext_gnmi_ext_proto_rawDescData)
	})
	return file_proto_gnmi_ext_gnmi_ext_proto_rawDescData
}

var file_proto_gnmi_ext_gnmi_ext_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_gnmi_ext_gnmi_ext_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_gnmi_ext_gnmi_ext_proto_goTypes = []interface{}{
	(ExtensionID)(0),                  // 0: gnmi_ext.ExtensionID
	(*Extension)(nil),                 // 1: gnmi_ext.Extension
	(*RegisteredExtension)(nil),       // 2: gnmi_ext.RegisteredExtension
	(*MasterArbitration)(nil),         // 3: gnmi_ext.MasterArbitration
	(*Uint128)(nil),                   // 4: gnmi_ext.Uint128
	(*Role)(nil),                      // 5: gnmi_ext.Role
	(*History)(nil),                   // 6: gnmi_ext.History
	(*TimeRange)(nil),                 // 7: gnmi_ext.TimeRange
	(*Commit)(nil),                    // 8: gnmi_ext.Commit
	(*CommitRequest)(nil),             // 9: gnmi_ext.CommitRequest
	(*CommitConfirm)(nil),             // 10: gnmi_ext.CommitConfirm
	(*CommitCancel)(nil),              // 11: gnmi_ext.CommitCancel
	(*CommitSetRollbackDuration)(nil), // 12: gnmi_ext.CommitSetRollbackDuration
	(*Depth)(nil),                     // 13: gnmi_ext.Depth
	(*durationpb.Duration)(nil),       // 14: google.protobuf.Duration
}
var file_proto_gnmi_ext_gnmi_ext_proto_depIdxs = []int32{
	2,  // 0: gnmi_ext.Extension.registered_ext:type_name -> gnmi_ext.RegisteredExtension
	3,  // 1: gnmi_ext.Extension.master_arbitration:type_name -> gnmi_ext.MasterArbitration
	6,  // 2: gnmi_ext.Extension.history:type_name -> gnmi_ext.History
	8,  // 3: gnmi_ext.Extension.commit:type_name -> gnmi_ext.Commit
	13, // 4: gnmi_ext.Extension.depth:type_name -> gnmi_ext.Depth
	0,  // 5: gnmi_ext.RegisteredExtension.id:type_name -> gnmi_ext.ExtensionID
	5,  // 6: gnmi_ext.MasterArbitration.role:type_name -> gnmi_ext.Role
	4,  // 7: gnmi_ext.MasterArbitration.election_id:type_name -> gnmi_ext.Uint128
	7,  // 8: gnmi_ext.History.range:type_name -> gnmi_ext.TimeRange
	9,  // 9: gnmi_ext.Commit.commit:type_name -> gnmi_ext.CommitRequest
	10, // 10: gnmi_ext.Commit.confirm:type_name -> gnmi_ext.CommitConfirm
	11, // 11: gnmi_ext.Commit.cancel:type_name -> gnmi_ext.CommitCancel
	12, // 12: gnmi_ext.Commit.set_rollback_duration:type_name -> gnmi_ext.CommitSetRollbackDuration
	14, // 13: gnmi_ext.CommitRequest.rollback_duration:type_name -> google.protobuf.Duration
	14, // 14: gnmi_ext.CommitSetRollbackDuration.rollback_duration:type_name -> google.protobuf.Duration
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_gnmi_ext_gnmi_ext_proto_init() }
func file_proto_gnmi_ext_gnmi_ext_proto_init() {
	if File_proto_gnmi_ext_gnmi_ext_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterArbitration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint128); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitSetRollbackDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Depth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Extension_RegisteredExt)(nil),
		(*Extension_MasterArbitration)(nil),
		(*Extension_History)(nil),
		(*Extension_Commit)(nil),
		(*Extension_Depth)(nil),
	}
	file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*History_SnapshotTime)(nil),
		(*History_Range)(nil),
	}
	file_proto_gnmi_ext_gnmi_ext_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Commit_Commit)(nil),
		(*Commit_Confirm)(nil),
		(*Commit_Cancel)(nil),
		(*Commit_SetRollbackDuration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_gnmi_ext_gnmi_ext_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_gnmi_ext_gnmi_ext_proto_goTypes,
		DependencyIndexes: file_proto_gnmi_ext_gnmi_ext_proto_depIdxs,
		EnumInfos:         file_proto_gnmi_ext_gnmi_ext_proto_enumTypes,
		MessageInfos:      file_proto_gnmi_ext_gnmi_ext_proto_msgTypes,
	}.Build()
	File_proto_gnmi_ext_gnmi_ext_proto = out.File
	file_proto_gnmi_ext_gnmi_ext_proto_rawDesc = nil
	file_proto_gnmi_ext_gnmi_ext_proto_goTypes = nil
	file_proto_gnmi_ext_gnmi_ext_proto_depIdxs = nil
}
